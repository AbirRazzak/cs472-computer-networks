Abir Razzak
CS472 - Computer Networks
HW4 Questions

PART A
-----

1. What are the security considerations with port_mode? With pasv_mode? Why would I want one or the other (think about some of the problems that you had with the client and the server – and who calls who)? Think of the conversation between client and server. Think about how NAT changes this – is it a good thing that an application knows about IP addresses?

> Response:
 It depends on whether you want the server or the client to be specifying the port number to be setting up the data channel. With port_mode, you allow the client to pick which port number they want, where as with pasv_mode the server will be the one to decide the port number. A NAT acts as a firewall to protect clients, which makes it so that only a few select ports are accessible from the outside.

2. Think about the security implications of a fixed pathname (although probably in a system directory when it would be deployed as a system service) rather than a relative (like out of the current directory). Describe the “it depends” of these two approaches.

> Response:
 A fixed pathname will be more secure than using relative pathnames as fixed pathnames are absolute and will always point to the same file no matter where in the system directory you are currently in. "Every time a resource or file is included by the application, there is a risk that an attacker may be able to include a file or remote resource you didn’t authorize." The hyperlink below explains this more in detail, but I thought that sentence was a good catch-all.
 Source: https://owasp.org/www-community/attacks/Path_Traversal

PART B
-----

3. Why is logging an important part of security?

> Response:
 More specifically, GOOD logging is an important part of security. Logging allows server maintainers to analyze connections to their servers to make sure that their users are safe from or knowledgeable about cyber attacks. In the instance that someone has experienced a cyber attack, a proper log file will allow them to analyze what the attacker has done to them and when. Logging location data, time, and specific activity steps are all important aspects in security for log files. But simply logging is not enough, there needs to be proper analysis done on the log files for the log file to be of any use. Detecting suspicious location activities such as logging in from different locations in a short span of time, can help alert users that their account might be compromised.

4. Do you see any problems with concurrent servers and log files? (dealing with multiple processes or threads writing to the log file at the same time)? How can you solve this problem to keep one log file for the server even though there are multiple threads/processes trying to write?

> Response:
 Potential problems with concurrent servers writing to a single log file are:
 1) If there are too many concurrent users on the server then the log file might be busy and so the server might not be able to write to the file if the file is in use
 2) The log file can become very large and hard to maintain very quickly without constant upkeep
 3) Poorly formatted log files can become very hard to find any useful info with the constant flow of data
 4) If the log file becomes corrupt, it affects every concurrent connection on the server
 
 To solve potential problems with concurrent servers with a single log file:
 1) Use a single process to write to the log file, and use a queue system to keep a backlog of pending log statements so that there is no chance that log statements are lost due to occupied file errors.
 2) Regularly perform maintenance on the log files such as performing backups and cleans, to ensure that log files do not become too large. This can be done through automation, or being mindful about current log files.
 3) Have a standard for formatting your log file that can be used with log file maintenance software so that it is easier to search for specific log statements in the future. This will also make it easier to distinguish between different concurrent connections to the server.
 4) Ties in with number 2, make sure to keep an eye on your log files often. Perform maintenance and use automation to check the health of log files and perform backups often in the event of corruption or unexpected bugs.

PART C
-----

5. What are the different issues with securing the connections with IMPLICIT mode (which is a separate server listening with TLS always at port 990 by default) and EXPLICIT mode (which is the same server waiting on port 21 for special commands to turn TLS on and off)? What are the “it depends” part of the tradeoffs? Think of the data that you’re transporting, both on the command channel and data channel.

> Response:
 The main difference is how flexible you'd like your connection to be. Explicit mode allows the user to choose whether or not they want to send files via encryption. This allows the user to have more control over the security over their files. The downside is that then this allows files to be sent over the network insecurely. The "it depends" in this situation is whether or not you'd like your users to be able to have this option in the first place. With implicit mode the entire FTP session is encrypted, and does not allow the user to choose whether or not they would like to encrypt the transfer. This means less flexibility for the user, but also ensures that every single transfer is secure. This also means that more resources are used per transfer as computation is required to encrypt every single transfer to/from the server; rather than opting into using more resources, every transfer will be using more resources.

PART E
-----

6. Do you think there are events that you’ve logged which show that someone is trying to break into your server? Do you have to add other log entries and checking to make sure that attacks aren’t happening? Brainstorm some attacks against your FTP server. For at least one of them, implement additional code to check for them and log appropriate entries.

> Response:
 "Do you think there are events that you’ve logged which show that someone is trying to break into your server?" -- If the log file shows a user attempting to log into the same account for several attempts, this could be a sign of someone trying to brute force hack into someone's account (or a very forgetful person having a bad day remembering their password).
 "Do you have to add other log entries and checking to make sure that attacks aren’t happening?" -- Yes. Currently, there is no automation in place that is checking over the log file to prevent hacking and malicious attacks. There should ideally be a process that checks the log file for suspicious activity and will freeze activity from an IP address if it detects such activity.
 "Brainstorm some attacks against your FTP server." -- Brute force user account hacking, changing server files (by changing directories to where the server located, if they know where its located).
 "For at least one of them, implement additional code to check for them and log appropriate entries." -- I decided to address the brute force user account hacking attack and implemented a system that will kick the user from the server if they incorrectly type their password 5 times in a row.
